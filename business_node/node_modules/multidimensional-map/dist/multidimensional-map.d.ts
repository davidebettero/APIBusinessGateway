import { OrderedMap } from './ordered-map';
export interface DimensionCollection<T> {
    [key: string]: OrderedMap<string | number, T>;
}
export declare type QueryRange<T> = [T | null, T | null];
export interface QueryDetails<T> {
    matches?: (string | number)[];
    range?: QueryRange<T>;
}
export interface MatchQuery<T> {
    [dimension: string]: T | QueryDetails<T>;
}
export interface OrderOverride {
    [dimension: string]: (string | number)[];
}
export interface SubsetOptions {
    keepOrder?: string[] | boolean;
}
declare class MultidimensionalMap<EntryT> {
    dimensions: DimensionCollection<EntryT[]>;
    entries: EntryT[];
    constructor(dimensions: string[], entries?: EntryT[], order?: OrderOverride);
    addEntries(entries: EntryT[]): void;
    getAllEntries(): EntryT[];
    getEntriesInRange(dimension: keyof EntryT, start: string | number | null, end: string | number | null): EntryT[];
    getSubsetArray(query: MatchQuery<string | number>): EntryT[];
    getSubset(query: MatchQuery<string | number>, options?: SubsetOptions): MultidimensionalMap<EntryT>;
    combineEntries(measures: keyof EntryT | (keyof EntryT)[], dimensions?: string | string[], entries?: EntryT[]): any;
    get length(): number;
}
export { MultidimensionalMap };
